// source: ag/types/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var kit_score_score_pb = require('../../kit/score/score_pb.js');
goog.object.extend(proto, kit_score_score_pb);
var patch_go_pb = require('../../patch/go_pb.js');
goog.object.extend(proto, patch_go_pb);
goog.exportSymbol('proto.types.Assignment', null, global);
goog.exportSymbol('proto.types.Assignments', null, global);
goog.exportSymbol('proto.types.Benchmarks', null, global);
goog.exportSymbol('proto.types.Course', null, global);
goog.exportSymbol('proto.types.Courses', null, global);
goog.exportSymbol('proto.types.Enrollment', null, global);
goog.exportSymbol('proto.types.Enrollment.DisplayState', null, global);
goog.exportSymbol('proto.types.Enrollment.UserStatus', null, global);
goog.exportSymbol('proto.types.Enrollments', null, global);
goog.exportSymbol('proto.types.GradingBenchmark', null, global);
goog.exportSymbol('proto.types.GradingCriterion', null, global);
goog.exportSymbol('proto.types.GradingCriterion.Grade', null, global);
goog.exportSymbol('proto.types.Group', null, global);
goog.exportSymbol('proto.types.Group.GroupStatus', null, global);
goog.exportSymbol('proto.types.Groups', null, global);
goog.exportSymbol('proto.types.Issue', null, global);
goog.exportSymbol('proto.types.RemoteIdentity', null, global);
goog.exportSymbol('proto.types.Repository', null, global);
goog.exportSymbol('proto.types.Repository.Type', null, global);
goog.exportSymbol('proto.types.Review', null, global);
goog.exportSymbol('proto.types.Submission', null, global);
goog.exportSymbol('proto.types.Submission.Status', null, global);
goog.exportSymbol('proto.types.Submissions', null, global);
goog.exportSymbol('proto.types.Task', null, global);
goog.exportSymbol('proto.types.UsedSlipDays', null, global);
goog.exportSymbol('proto.types.User', null, global);
goog.exportSymbol('proto.types.Users', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.User.repeatedFields_, null);
};
goog.inherits(proto.types.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.User.displayName = 'proto.types.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Users = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Users.repeatedFields_, null);
};
goog.inherits(proto.types.Users, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Users.displayName = 'proto.types.Users';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.RemoteIdentity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.RemoteIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.RemoteIdentity.displayName = 'proto.types.RemoteIdentity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Group.repeatedFields_, null);
};
goog.inherits(proto.types.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Group.displayName = 'proto.types.Group';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Groups = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Groups.repeatedFields_, null);
};
goog.inherits(proto.types.Groups, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Groups.displayName = 'proto.types.Groups';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Course = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Course.repeatedFields_, null);
};
goog.inherits(proto.types.Course, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Course.displayName = 'proto.types.Course';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Courses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Courses.repeatedFields_, null);
};
goog.inherits(proto.types.Courses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Courses.displayName = 'proto.types.Courses';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Repository = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Repository.repeatedFields_, null);
};
goog.inherits(proto.types.Repository, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Repository.displayName = 'proto.types.Repository';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Enrollment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Enrollment.repeatedFields_, null);
};
goog.inherits(proto.types.Enrollment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Enrollment.displayName = 'proto.types.Enrollment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.UsedSlipDays = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.UsedSlipDays, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.UsedSlipDays.displayName = 'proto.types.UsedSlipDays';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Enrollments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Enrollments.repeatedFields_, null);
};
goog.inherits(proto.types.Enrollments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Enrollments.displayName = 'proto.types.Enrollments';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Assignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Assignment.repeatedFields_, null);
};
goog.inherits(proto.types.Assignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Assignment.displayName = 'proto.types.Assignment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Task.repeatedFields_, null);
};
goog.inherits(proto.types.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Task.displayName = 'proto.types.Task';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Issue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Issue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Issue.displayName = 'proto.types.Issue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Assignments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Assignments.repeatedFields_, null);
};
goog.inherits(proto.types.Assignments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Assignments.displayName = 'proto.types.Assignments';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Submission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Submission.repeatedFields_, null);
};
goog.inherits(proto.types.Submission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Submission.displayName = 'proto.types.Submission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Submissions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Submissions.repeatedFields_, null);
};
goog.inherits(proto.types.Submissions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Submissions.displayName = 'proto.types.Submissions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.GradingBenchmark = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.GradingBenchmark.repeatedFields_, null);
};
goog.inherits(proto.types.GradingBenchmark, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.GradingBenchmark.displayName = 'proto.types.GradingBenchmark';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Benchmarks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Benchmarks.repeatedFields_, null);
};
goog.inherits(proto.types.Benchmarks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Benchmarks.displayName = 'proto.types.Benchmarks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.GradingCriterion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.GradingCriterion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.GradingCriterion.displayName = 'proto.types.GradingCriterion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Review = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Review.repeatedFields_, null);
};
goog.inherits(proto.types.Review, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Review.displayName = 'proto.types.Review';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.User.repeatedFields_ = [9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.User.prototype.toObject = function(opt_includeInstance) {
  return proto.types.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isadmin: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    studentid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    email: jspb.Message.getFieldWithDefault(msg, 5, ""),
    avatarurl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    login: jspb.Message.getFieldWithDefault(msg, 7, ""),
    updatetoken: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    remoteidentitiesList: jspb.Message.toObjectList(msg.getRemoteidentitiesList(),
    proto.types.RemoteIdentity.toObject, includeInstance),
    enrollmentsList: jspb.Message.toObjectList(msg.getEnrollmentsList(),
    proto.types.Enrollment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.User}
 */
proto.types.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.User;
  return proto.types.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.User}
 */
proto.types.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsadmin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStudentid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarurl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdatetoken(value);
      break;
    case 9:
      var value = new proto.types.RemoteIdentity;
      reader.readMessage(value,proto.types.RemoteIdentity.deserializeBinaryFromReader);
      msg.addRemoteidentities(value);
      break;
    case 10:
      var value = new proto.types.Enrollment;
      reader.readMessage(value,proto.types.Enrollment.deserializeBinaryFromReader);
      msg.addEnrollments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIsadmin();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStudentid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAvatarurl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLogin();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUpdatetoken();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRemoteidentitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.types.RemoteIdentity.serializeBinaryToWriter
    );
  }
  f = message.getEnrollmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.types.Enrollment.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.User.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.User} returns this
 */
proto.types.User.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool isAdmin = 2;
 * @return {boolean}
 */
proto.types.User.prototype.getIsadmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.User} returns this
 */
proto.types.User.prototype.setIsadmin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.types.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.User} returns this
 */
proto.types.User.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string studentID = 4;
 * @return {string}
 */
proto.types.User.prototype.getStudentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.User} returns this
 */
proto.types.User.prototype.setStudentid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string email = 5;
 * @return {string}
 */
proto.types.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.User} returns this
 */
proto.types.User.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string avatarURL = 6;
 * @return {string}
 */
proto.types.User.prototype.getAvatarurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.User} returns this
 */
proto.types.User.prototype.setAvatarurl = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string login = 7;
 * @return {string}
 */
proto.types.User.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.User} returns this
 */
proto.types.User.prototype.setLogin = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool updateToken = 8;
 * @return {boolean}
 */
proto.types.User.prototype.getUpdatetoken = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.User} returns this
 */
proto.types.User.prototype.setUpdatetoken = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * repeated RemoteIdentity remoteIdentities = 9;
 * @return {!Array<!proto.types.RemoteIdentity>}
 */
proto.types.User.prototype.getRemoteidentitiesList = function() {
  return /** @type{!Array<!proto.types.RemoteIdentity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.RemoteIdentity, 9));
};


/**
 * @param {!Array<!proto.types.RemoteIdentity>} value
 * @return {!proto.types.User} returns this
*/
proto.types.User.prototype.setRemoteidentitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.types.RemoteIdentity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.RemoteIdentity}
 */
proto.types.User.prototype.addRemoteidentities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.types.RemoteIdentity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.User} returns this
 */
proto.types.User.prototype.clearRemoteidentitiesList = function() {
  return this.setRemoteidentitiesList([]);
};


/**
 * repeated Enrollment enrollments = 10;
 * @return {!Array<!proto.types.Enrollment>}
 */
proto.types.User.prototype.getEnrollmentsList = function() {
  return /** @type{!Array<!proto.types.Enrollment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Enrollment, 10));
};


/**
 * @param {!Array<!proto.types.Enrollment>} value
 * @return {!proto.types.User} returns this
*/
proto.types.User.prototype.setEnrollmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.types.Enrollment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Enrollment}
 */
proto.types.User.prototype.addEnrollments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.types.Enrollment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.User} returns this
 */
proto.types.User.prototype.clearEnrollmentsList = function() {
  return this.setEnrollmentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Users.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Users.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Users.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Users} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Users.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.types.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Users}
 */
proto.types.Users.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Users;
  return proto.types.Users.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Users} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Users}
 */
proto.types.Users.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.User;
      reader.readMessage(value,proto.types.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Users.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Users.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Users} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Users.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated User users = 1;
 * @return {!Array<!proto.types.User>}
 */
proto.types.Users.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.types.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.User, 1));
};


/**
 * @param {!Array<!proto.types.User>} value
 * @return {!proto.types.Users} returns this
*/
proto.types.Users.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.User}
 */
proto.types.Users.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Users} returns this
 */
proto.types.Users.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.RemoteIdentity.prototype.toObject = function(opt_includeInstance) {
  return proto.types.RemoteIdentity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.RemoteIdentity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.RemoteIdentity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    provider: jspb.Message.getFieldWithDefault(msg, 2, ""),
    remoteid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.RemoteIdentity}
 */
proto.types.RemoteIdentity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.RemoteIdentity;
  return proto.types.RemoteIdentity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.RemoteIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.RemoteIdentity}
 */
proto.types.RemoteIdentity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemoteid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.RemoteIdentity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.RemoteIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.RemoteIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.RemoteIdentity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRemoteid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.RemoteIdentity.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.RemoteIdentity} returns this
 */
proto.types.RemoteIdentity.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string provider = 2;
 * @return {string}
 */
proto.types.RemoteIdentity.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.RemoteIdentity} returns this
 */
proto.types.RemoteIdentity.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 remoteID = 3;
 * @return {number}
 */
proto.types.RemoteIdentity.prototype.getRemoteid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.RemoteIdentity} returns this
 */
proto.types.RemoteIdentity.prototype.setRemoteid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string accessToken = 4;
 * @return {string}
 */
proto.types.RemoteIdentity.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.RemoteIdentity} returns this
 */
proto.types.RemoteIdentity.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 userID = 5;
 * @return {number}
 */
proto.types.RemoteIdentity.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.RemoteIdentity} returns this
 */
proto.types.RemoteIdentity.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Group.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    courseid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.types.User.toObject, includeInstance),
    enrollmentsList: jspb.Message.toObjectList(msg.getEnrollmentsList(),
    proto.types.Enrollment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Group}
 */
proto.types.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Group;
  return proto.types.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Group}
 */
proto.types.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCourseid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTeamid(value);
      break;
    case 5:
      var value = /** @type {!proto.types.Group.GroupStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = new proto.types.User;
      reader.readMessage(value,proto.types.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 7:
      var value = new proto.types.Enrollment;
      reader.readMessage(value,proto.types.Enrollment.deserializeBinaryFromReader);
      msg.addEnrollments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCourseid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.types.User.serializeBinaryToWriter
    );
  }
  f = message.getEnrollmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.types.Enrollment.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.types.Group.GroupStatus = {
  PENDING: 0,
  APPROVED: 1
};

/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.Group.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Group} returns this
 */
proto.types.Group.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.types.Group.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Group} returns this
 */
proto.types.Group.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 courseID = 3;
 * @return {number}
 */
proto.types.Group.prototype.getCourseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Group} returns this
 */
proto.types.Group.prototype.setCourseid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 teamID = 4;
 * @return {number}
 */
proto.types.Group.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Group} returns this
 */
proto.types.Group.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional GroupStatus status = 5;
 * @return {!proto.types.Group.GroupStatus}
 */
proto.types.Group.prototype.getStatus = function() {
  return /** @type {!proto.types.Group.GroupStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.types.Group.GroupStatus} value
 * @return {!proto.types.Group} returns this
 */
proto.types.Group.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated User users = 6;
 * @return {!Array<!proto.types.User>}
 */
proto.types.Group.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.types.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.User, 6));
};


/**
 * @param {!Array<!proto.types.User>} value
 * @return {!proto.types.Group} returns this
*/
proto.types.Group.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.types.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.User}
 */
proto.types.Group.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.types.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Group} returns this
 */
proto.types.Group.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * repeated Enrollment enrollments = 7;
 * @return {!Array<!proto.types.Enrollment>}
 */
proto.types.Group.prototype.getEnrollmentsList = function() {
  return /** @type{!Array<!proto.types.Enrollment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Enrollment, 7));
};


/**
 * @param {!Array<!proto.types.Enrollment>} value
 * @return {!proto.types.Group} returns this
*/
proto.types.Group.prototype.setEnrollmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.types.Enrollment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Enrollment}
 */
proto.types.Group.prototype.addEnrollments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.types.Enrollment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Group} returns this
 */
proto.types.Group.prototype.clearEnrollmentsList = function() {
  return this.setEnrollmentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Groups.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Groups.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Groups.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Groups} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Groups.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.types.Group.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Groups}
 */
proto.types.Groups.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Groups;
  return proto.types.Groups.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Groups} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Groups}
 */
proto.types.Groups.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Group;
      reader.readMessage(value,proto.types.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Groups.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Groups.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Groups} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Groups.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.Group.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Group groups = 1;
 * @return {!Array<!proto.types.Group>}
 */
proto.types.Groups.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.types.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Group, 1));
};


/**
 * @param {!Array<!proto.types.Group>} value
 * @return {!proto.types.Groups} returns this
*/
proto.types.Groups.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Group}
 */
proto.types.Groups.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Groups} returns this
 */
proto.types.Groups.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Course.repeatedFields_ = [14,15,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Course.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Course.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Course} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Course.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    coursecreatorid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    code: jspb.Message.getFieldWithDefault(msg, 4, ""),
    year: jspb.Message.getFieldWithDefault(msg, 5, 0),
    tag: jspb.Message.getFieldWithDefault(msg, 6, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 7, ""),
    organizationid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    organizationpath: jspb.Message.getFieldWithDefault(msg, 9, ""),
    slipdays: jspb.Message.getFieldWithDefault(msg, 10, 0),
    dockerfile: jspb.Message.getFieldWithDefault(msg, 11, ""),
    installationid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    enrolled: jspb.Message.getFieldWithDefault(msg, 13, 0),
    enrollmentsList: jspb.Message.toObjectList(msg.getEnrollmentsList(),
    proto.types.Enrollment.toObject, includeInstance),
    assignmentsList: jspb.Message.toObjectList(msg.getAssignmentsList(),
    proto.types.Assignment.toObject, includeInstance),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.types.Group.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Course}
 */
proto.types.Course.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Course;
  return proto.types.Course.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Course} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Course}
 */
proto.types.Course.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCoursecreatorid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setYear(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrganizationid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationpath(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSlipdays(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDockerfile(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstallationid(value);
      break;
    case 13:
      var value = /** @type {!proto.types.Enrollment.UserStatus} */ (reader.readEnum());
      msg.setEnrolled(value);
      break;
    case 14:
      var value = new proto.types.Enrollment;
      reader.readMessage(value,proto.types.Enrollment.deserializeBinaryFromReader);
      msg.addEnrollments(value);
      break;
    case 15:
      var value = new proto.types.Assignment;
      reader.readMessage(value,proto.types.Assignment.deserializeBinaryFromReader);
      msg.addAssignments(value);
      break;
    case 16:
      var value = new proto.types.Group;
      reader.readMessage(value,proto.types.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Course.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Course.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Course} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Course.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCoursecreatorid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOrganizationid();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getOrganizationpath();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSlipdays();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getDockerfile();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getInstallationid();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getEnrolled();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getEnrollmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.types.Enrollment.serializeBinaryToWriter
    );
  }
  f = message.getAssignmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.types.Assignment.serializeBinaryToWriter
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.types.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.Course.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 courseCreatorID = 2;
 * @return {number}
 */
proto.types.Course.prototype.getCoursecreatorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setCoursecreatorid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.types.Course.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string code = 4;
 * @return {string}
 */
proto.types.Course.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 year = 5;
 * @return {number}
 */
proto.types.Course.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string tag = 6;
 * @return {string}
 */
proto.types.Course.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string provider = 7;
 * @return {string}
 */
proto.types.Course.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 organizationID = 8;
 * @return {number}
 */
proto.types.Course.prototype.getOrganizationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setOrganizationid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string organizationPath = 9;
 * @return {string}
 */
proto.types.Course.prototype.getOrganizationpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setOrganizationpath = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint32 slipDays = 10;
 * @return {number}
 */
proto.types.Course.prototype.getSlipdays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setSlipdays = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string dockerfile = 11;
 * @return {string}
 */
proto.types.Course.prototype.getDockerfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setDockerfile = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int64 installationID = 12;
 * @return {number}
 */
proto.types.Course.prototype.getInstallationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setInstallationid = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional Enrollment.UserStatus enrolled = 13;
 * @return {!proto.types.Enrollment.UserStatus}
 */
proto.types.Course.prototype.getEnrolled = function() {
  return /** @type {!proto.types.Enrollment.UserStatus} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.types.Enrollment.UserStatus} value
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.setEnrolled = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * repeated Enrollment enrollments = 14;
 * @return {!Array<!proto.types.Enrollment>}
 */
proto.types.Course.prototype.getEnrollmentsList = function() {
  return /** @type{!Array<!proto.types.Enrollment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Enrollment, 14));
};


/**
 * @param {!Array<!proto.types.Enrollment>} value
 * @return {!proto.types.Course} returns this
*/
proto.types.Course.prototype.setEnrollmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.types.Enrollment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Enrollment}
 */
proto.types.Course.prototype.addEnrollments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.types.Enrollment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.clearEnrollmentsList = function() {
  return this.setEnrollmentsList([]);
};


/**
 * repeated Assignment assignments = 15;
 * @return {!Array<!proto.types.Assignment>}
 */
proto.types.Course.prototype.getAssignmentsList = function() {
  return /** @type{!Array<!proto.types.Assignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Assignment, 15));
};


/**
 * @param {!Array<!proto.types.Assignment>} value
 * @return {!proto.types.Course} returns this
*/
proto.types.Course.prototype.setAssignmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.types.Assignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Assignment}
 */
proto.types.Course.prototype.addAssignments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.types.Assignment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.clearAssignmentsList = function() {
  return this.setAssignmentsList([]);
};


/**
 * repeated Group groups = 16;
 * @return {!Array<!proto.types.Group>}
 */
proto.types.Course.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.types.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Group, 16));
};


/**
 * @param {!Array<!proto.types.Group>} value
 * @return {!proto.types.Course} returns this
*/
proto.types.Course.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.types.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Group}
 */
proto.types.Course.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.types.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Course} returns this
 */
proto.types.Course.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Courses.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Courses.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Courses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Courses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Courses.toObject = function(includeInstance, msg) {
  var f, obj = {
    coursesList: jspb.Message.toObjectList(msg.getCoursesList(),
    proto.types.Course.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Courses}
 */
proto.types.Courses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Courses;
  return proto.types.Courses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Courses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Courses}
 */
proto.types.Courses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Course;
      reader.readMessage(value,proto.types.Course.deserializeBinaryFromReader);
      msg.addCourses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Courses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Courses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Courses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Courses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoursesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.Course.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Course courses = 1;
 * @return {!Array<!proto.types.Course>}
 */
proto.types.Courses.prototype.getCoursesList = function() {
  return /** @type{!Array<!proto.types.Course>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Course, 1));
};


/**
 * @param {!Array<!proto.types.Course>} value
 * @return {!proto.types.Courses} returns this
*/
proto.types.Courses.prototype.setCoursesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.Course=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Course}
 */
proto.types.Courses.prototype.addCourses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Course, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Courses} returns this
 */
proto.types.Courses.prototype.clearCoursesList = function() {
  return this.setCoursesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Repository.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Repository.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Repository.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Repository} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Repository.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    organizationid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    repositoryid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    htmlurl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    repotype: jspb.Message.getFieldWithDefault(msg, 7, 0),
    issuesList: jspb.Message.toObjectList(msg.getIssuesList(),
    proto.types.Issue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Repository}
 */
proto.types.Repository.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Repository;
  return proto.types.Repository.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Repository} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Repository}
 */
proto.types.Repository.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrganizationid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRepositoryid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlurl(value);
      break;
    case 7:
      var value = /** @type {!proto.types.Repository.Type} */ (reader.readEnum());
      msg.setRepotype(value);
      break;
    case 8:
      var value = new proto.types.Issue;
      reader.readMessage(value,proto.types.Issue.deserializeBinaryFromReader);
      msg.addIssues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Repository.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Repository.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Repository} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Repository.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOrganizationid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRepositoryid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getHtmlurl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRepotype();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getIssuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.types.Issue.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.types.Repository.Type = {
  NONE: 0,
  COURSEINFO: 1,
  ASSIGNMENTS: 2,
  TESTS: 3,
  USER: 4,
  GROUP: 5
};

/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.Repository.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Repository} returns this
 */
proto.types.Repository.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 organizationID = 2;
 * @return {number}
 */
proto.types.Repository.prototype.getOrganizationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Repository} returns this
 */
proto.types.Repository.prototype.setOrganizationid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 repositoryID = 3;
 * @return {number}
 */
proto.types.Repository.prototype.getRepositoryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Repository} returns this
 */
proto.types.Repository.prototype.setRepositoryid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 userID = 4;
 * @return {number}
 */
proto.types.Repository.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Repository} returns this
 */
proto.types.Repository.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 groupID = 5;
 * @return {number}
 */
proto.types.Repository.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Repository} returns this
 */
proto.types.Repository.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string HTMLURL = 6;
 * @return {string}
 */
proto.types.Repository.prototype.getHtmlurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Repository} returns this
 */
proto.types.Repository.prototype.setHtmlurl = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Type repoType = 7;
 * @return {!proto.types.Repository.Type}
 */
proto.types.Repository.prototype.getRepotype = function() {
  return /** @type {!proto.types.Repository.Type} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.types.Repository.Type} value
 * @return {!proto.types.Repository} returns this
 */
proto.types.Repository.prototype.setRepotype = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * repeated Issue issues = 8;
 * @return {!Array<!proto.types.Issue>}
 */
proto.types.Repository.prototype.getIssuesList = function() {
  return /** @type{!Array<!proto.types.Issue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Issue, 8));
};


/**
 * @param {!Array<!proto.types.Issue>} value
 * @return {!proto.types.Repository} returns this
*/
proto.types.Repository.prototype.setIssuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.types.Issue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Issue}
 */
proto.types.Repository.prototype.addIssues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.types.Issue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Repository} returns this
 */
proto.types.Repository.prototype.clearIssuesList = function() {
  return this.setIssuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Enrollment.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Enrollment.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Enrollment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Enrollment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Enrollment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    courseid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hasteacherscopes: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    user: (f = msg.getUser()) && proto.types.User.toObject(includeInstance, f),
    course: (f = msg.getCourse()) && proto.types.Course.toObject(includeInstance, f),
    group: (f = msg.getGroup()) && proto.types.Group.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 9, 0),
    state: jspb.Message.getFieldWithDefault(msg, 10, 0),
    slipdaysremaining: jspb.Message.getFieldWithDefault(msg, 11, 0),
    lastactivitydate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    totalapproved: jspb.Message.getFieldWithDefault(msg, 13, 0),
    usedslipdaysList: jspb.Message.toObjectList(msg.getUsedslipdaysList(),
    proto.types.UsedSlipDays.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Enrollment}
 */
proto.types.Enrollment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Enrollment;
  return proto.types.Enrollment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Enrollment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Enrollment}
 */
proto.types.Enrollment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCourseid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupid(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasteacherscopes(value);
      break;
    case 6:
      var value = new proto.types.User;
      reader.readMessage(value,proto.types.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 7:
      var value = new proto.types.Course;
      reader.readMessage(value,proto.types.Course.deserializeBinaryFromReader);
      msg.setCourse(value);
      break;
    case 8:
      var value = new proto.types.Group;
      reader.readMessage(value,proto.types.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 9:
      var value = /** @type {!proto.types.Enrollment.UserStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {!proto.types.Enrollment.DisplayState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSlipdaysremaining(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastactivitydate(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalapproved(value);
      break;
    case 14:
      var value = new proto.types.UsedSlipDays;
      reader.readMessage(value,proto.types.UsedSlipDays.deserializeBinaryFromReader);
      msg.addUsedslipdays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Enrollment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Enrollment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Enrollment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Enrollment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCourseid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHasteacherscopes();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.types.User.serializeBinaryToWriter
    );
  }
  f = message.getCourse();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.types.Course.serializeBinaryToWriter
    );
  }
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.types.Group.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getSlipdaysremaining();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getLastactivitydate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTotalapproved();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getUsedslipdaysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.types.UsedSlipDays.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.types.Enrollment.UserStatus = {
  NONE: 0,
  PENDING: 1,
  STUDENT: 2,
  TEACHER: 3
};

/**
 * @enum {number}
 */
proto.types.Enrollment.DisplayState = {
  UNSET: 0,
  HIDDEN: 1,
  VISIBLE: 2,
  FAVORITE: 3
};

/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.Enrollment.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 courseID = 2;
 * @return {number}
 */
proto.types.Enrollment.prototype.getCourseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.setCourseid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 userID = 3;
 * @return {number}
 */
proto.types.Enrollment.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 groupID = 4;
 * @return {number}
 */
proto.types.Enrollment.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool hasTeacherScopes = 5;
 * @return {boolean}
 */
proto.types.Enrollment.prototype.getHasteacherscopes = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.setHasteacherscopes = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional User user = 6;
 * @return {?proto.types.User}
 */
proto.types.Enrollment.prototype.getUser = function() {
  return /** @type{?proto.types.User} */ (
    jspb.Message.getWrapperField(this, proto.types.User, 6));
};


/**
 * @param {?proto.types.User|undefined} value
 * @return {!proto.types.Enrollment} returns this
*/
proto.types.Enrollment.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.Enrollment.prototype.hasUser = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Course course = 7;
 * @return {?proto.types.Course}
 */
proto.types.Enrollment.prototype.getCourse = function() {
  return /** @type{?proto.types.Course} */ (
    jspb.Message.getWrapperField(this, proto.types.Course, 7));
};


/**
 * @param {?proto.types.Course|undefined} value
 * @return {!proto.types.Enrollment} returns this
*/
proto.types.Enrollment.prototype.setCourse = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.clearCourse = function() {
  return this.setCourse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.Enrollment.prototype.hasCourse = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Group group = 8;
 * @return {?proto.types.Group}
 */
proto.types.Enrollment.prototype.getGroup = function() {
  return /** @type{?proto.types.Group} */ (
    jspb.Message.getWrapperField(this, proto.types.Group, 8));
};


/**
 * @param {?proto.types.Group|undefined} value
 * @return {!proto.types.Enrollment} returns this
*/
proto.types.Enrollment.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.Enrollment.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional UserStatus status = 9;
 * @return {!proto.types.Enrollment.UserStatus}
 */
proto.types.Enrollment.prototype.getStatus = function() {
  return /** @type {!proto.types.Enrollment.UserStatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.types.Enrollment.UserStatus} value
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional DisplayState state = 10;
 * @return {!proto.types.Enrollment.DisplayState}
 */
proto.types.Enrollment.prototype.getState = function() {
  return /** @type {!proto.types.Enrollment.DisplayState} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.types.Enrollment.DisplayState} value
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional uint32 slipDaysRemaining = 11;
 * @return {number}
 */
proto.types.Enrollment.prototype.getSlipdaysremaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.setSlipdaysremaining = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string lastActivityDate = 12;
 * @return {string}
 */
proto.types.Enrollment.prototype.getLastactivitydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.setLastactivitydate = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional uint64 totalApproved = 13;
 * @return {number}
 */
proto.types.Enrollment.prototype.getTotalapproved = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.setTotalapproved = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * repeated UsedSlipDays usedSlipDays = 14;
 * @return {!Array<!proto.types.UsedSlipDays>}
 */
proto.types.Enrollment.prototype.getUsedslipdaysList = function() {
  return /** @type{!Array<!proto.types.UsedSlipDays>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.UsedSlipDays, 14));
};


/**
 * @param {!Array<!proto.types.UsedSlipDays>} value
 * @return {!proto.types.Enrollment} returns this
*/
proto.types.Enrollment.prototype.setUsedslipdaysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.types.UsedSlipDays=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.UsedSlipDays}
 */
proto.types.Enrollment.prototype.addUsedslipdays = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.types.UsedSlipDays, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Enrollment} returns this
 */
proto.types.Enrollment.prototype.clearUsedslipdaysList = function() {
  return this.setUsedslipdaysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.UsedSlipDays.prototype.toObject = function(opt_includeInstance) {
  return proto.types.UsedSlipDays.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.UsedSlipDays} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.UsedSlipDays.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    enrollmentid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    assignmentid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    usedslipdays: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.UsedSlipDays}
 */
proto.types.UsedSlipDays.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.UsedSlipDays;
  return proto.types.UsedSlipDays.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.UsedSlipDays} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.UsedSlipDays}
 */
proto.types.UsedSlipDays.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEnrollmentid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAssignmentid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUsedslipdays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.UsedSlipDays.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.UsedSlipDays.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.UsedSlipDays} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.UsedSlipDays.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEnrollmentid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAssignmentid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getUsedslipdays();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.UsedSlipDays.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.UsedSlipDays} returns this
 */
proto.types.UsedSlipDays.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 enrollmentID = 2;
 * @return {number}
 */
proto.types.UsedSlipDays.prototype.getEnrollmentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.UsedSlipDays} returns this
 */
proto.types.UsedSlipDays.prototype.setEnrollmentid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 assignmentID = 3;
 * @return {number}
 */
proto.types.UsedSlipDays.prototype.getAssignmentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.UsedSlipDays} returns this
 */
proto.types.UsedSlipDays.prototype.setAssignmentid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 usedSlipDays = 4;
 * @return {number}
 */
proto.types.UsedSlipDays.prototype.getUsedslipdays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.UsedSlipDays} returns this
 */
proto.types.UsedSlipDays.prototype.setUsedslipdays = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Enrollments.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Enrollments.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Enrollments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Enrollments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Enrollments.toObject = function(includeInstance, msg) {
  var f, obj = {
    enrollmentsList: jspb.Message.toObjectList(msg.getEnrollmentsList(),
    proto.types.Enrollment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Enrollments}
 */
proto.types.Enrollments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Enrollments;
  return proto.types.Enrollments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Enrollments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Enrollments}
 */
proto.types.Enrollments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Enrollment;
      reader.readMessage(value,proto.types.Enrollment.deserializeBinaryFromReader);
      msg.addEnrollments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Enrollments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Enrollments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Enrollments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Enrollments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnrollmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.Enrollment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Enrollment enrollments = 1;
 * @return {!Array<!proto.types.Enrollment>}
 */
proto.types.Enrollments.prototype.getEnrollmentsList = function() {
  return /** @type{!Array<!proto.types.Enrollment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Enrollment, 1));
};


/**
 * @param {!Array<!proto.types.Enrollment>} value
 * @return {!proto.types.Enrollments} returns this
*/
proto.types.Enrollments.prototype.setEnrollmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.Enrollment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Enrollment}
 */
proto.types.Enrollments.prototype.addEnrollments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Enrollment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Enrollments} returns this
 */
proto.types.Enrollments.prototype.clearEnrollmentsList = function() {
  return this.setEnrollmentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Assignment.repeatedFields_ = [12,13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Assignment.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Assignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Assignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Assignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    courseid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scriptfile: jspb.Message.getFieldWithDefault(msg, 4, ""),
    deadline: jspb.Message.getFieldWithDefault(msg, 5, ""),
    autoapprove: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    order: jspb.Message.getFieldWithDefault(msg, 7, 0),
    isgrouplab: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    scorelimit: jspb.Message.getFieldWithDefault(msg, 9, 0),
    reviewers: jspb.Message.getFieldWithDefault(msg, 10, 0),
    containertimeout: jspb.Message.getFieldWithDefault(msg, 11, 0),
    submissionsList: jspb.Message.toObjectList(msg.getSubmissionsList(),
    proto.types.Submission.toObject, includeInstance),
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.types.Task.toObject, includeInstance),
    gradingbenchmarksList: jspb.Message.toObjectList(msg.getGradingbenchmarksList(),
    proto.types.GradingBenchmark.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Assignment}
 */
proto.types.Assignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Assignment;
  return proto.types.Assignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Assignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Assignment}
 */
proto.types.Assignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCourseid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptfile(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeadline(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoapprove(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrder(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsgrouplab(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScorelimit(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReviewers(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContainertimeout(value);
      break;
    case 12:
      var value = new proto.types.Submission;
      reader.readMessage(value,proto.types.Submission.deserializeBinaryFromReader);
      msg.addSubmissions(value);
      break;
    case 13:
      var value = new proto.types.Task;
      reader.readMessage(value,proto.types.Task.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    case 14:
      var value = new proto.types.GradingBenchmark;
      reader.readMessage(value,proto.types.GradingBenchmark.deserializeBinaryFromReader);
      msg.addGradingbenchmarks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Assignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Assignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Assignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Assignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCourseid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScriptfile();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDeadline();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAutoapprove();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getIsgrouplab();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getScorelimit();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getReviewers();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getContainertimeout();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getSubmissionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.types.Submission.serializeBinaryToWriter
    );
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.types.Task.serializeBinaryToWriter
    );
  }
  f = message.getGradingbenchmarksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.types.GradingBenchmark.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.Assignment.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 CourseID = 2;
 * @return {number}
 */
proto.types.Assignment.prototype.getCourseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.setCourseid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.types.Assignment.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string scriptFile = 4;
 * @return {string}
 */
proto.types.Assignment.prototype.getScriptfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.setScriptfile = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string deadline = 5;
 * @return {string}
 */
proto.types.Assignment.prototype.getDeadline = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.setDeadline = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool autoApprove = 6;
 * @return {boolean}
 */
proto.types.Assignment.prototype.getAutoapprove = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.setAutoapprove = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional uint32 order = 7;
 * @return {number}
 */
proto.types.Assignment.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.setOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool isGroupLab = 8;
 * @return {boolean}
 */
proto.types.Assignment.prototype.getIsgrouplab = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.setIsgrouplab = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint32 scoreLimit = 9;
 * @return {number}
 */
proto.types.Assignment.prototype.getScorelimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.setScorelimit = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 reviewers = 10;
 * @return {number}
 */
proto.types.Assignment.prototype.getReviewers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.setReviewers = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 containerTimeout = 11;
 * @return {number}
 */
proto.types.Assignment.prototype.getContainertimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.setContainertimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * repeated Submission submissions = 12;
 * @return {!Array<!proto.types.Submission>}
 */
proto.types.Assignment.prototype.getSubmissionsList = function() {
  return /** @type{!Array<!proto.types.Submission>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Submission, 12));
};


/**
 * @param {!Array<!proto.types.Submission>} value
 * @return {!proto.types.Assignment} returns this
*/
proto.types.Assignment.prototype.setSubmissionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.types.Submission=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Submission}
 */
proto.types.Assignment.prototype.addSubmissions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.types.Submission, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.clearSubmissionsList = function() {
  return this.setSubmissionsList([]);
};


/**
 * repeated Task tasks = 13;
 * @return {!Array<!proto.types.Task>}
 */
proto.types.Assignment.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.types.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Task, 13));
};


/**
 * @param {!Array<!proto.types.Task>} value
 * @return {!proto.types.Assignment} returns this
*/
proto.types.Assignment.prototype.setTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.types.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Task}
 */
proto.types.Assignment.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.types.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.clearTasksList = function() {
  return this.setTasksList([]);
};


/**
 * repeated GradingBenchmark gradingBenchmarks = 14;
 * @return {!Array<!proto.types.GradingBenchmark>}
 */
proto.types.Assignment.prototype.getGradingbenchmarksList = function() {
  return /** @type{!Array<!proto.types.GradingBenchmark>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.GradingBenchmark, 14));
};


/**
 * @param {!Array<!proto.types.GradingBenchmark>} value
 * @return {!proto.types.Assignment} returns this
*/
proto.types.Assignment.prototype.setGradingbenchmarksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.types.GradingBenchmark=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.GradingBenchmark}
 */
proto.types.Assignment.prototype.addGradingbenchmarks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.types.GradingBenchmark, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Assignment} returns this
 */
proto.types.Assignment.prototype.clearGradingbenchmarksList = function() {
  return this.setGradingbenchmarksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Task.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assignmentid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    assignmentorder: jspb.Message.getFieldWithDefault(msg, 3, 0),
    title: jspb.Message.getFieldWithDefault(msg, 4, ""),
    body: jspb.Message.getFieldWithDefault(msg, 5, ""),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    issuesList: jspb.Message.toObjectList(msg.getIssuesList(),
    proto.types.Issue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Task}
 */
proto.types.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Task;
  return proto.types.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Task}
 */
proto.types.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAssignmentid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssignmentorder(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = new proto.types.Issue;
      reader.readMessage(value,proto.types.Issue.deserializeBinaryFromReader);
      msg.addIssues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAssignmentid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAssignmentorder();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIssuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.types.Issue.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.Task.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Task} returns this
 */
proto.types.Task.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 assignmentID = 2;
 * @return {number}
 */
proto.types.Task.prototype.getAssignmentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Task} returns this
 */
proto.types.Task.prototype.setAssignmentid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 assignmentOrder = 3;
 * @return {number}
 */
proto.types.Task.prototype.getAssignmentorder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Task} returns this
 */
proto.types.Task.prototype.setAssignmentorder = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.types.Task.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Task} returns this
 */
proto.types.Task.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string body = 5;
 * @return {string}
 */
proto.types.Task.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Task} returns this
 */
proto.types.Task.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.types.Task.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Task} returns this
 */
proto.types.Task.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated Issue issues = 7;
 * @return {!Array<!proto.types.Issue>}
 */
proto.types.Task.prototype.getIssuesList = function() {
  return /** @type{!Array<!proto.types.Issue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Issue, 7));
};


/**
 * @param {!Array<!proto.types.Issue>} value
 * @return {!proto.types.Task} returns this
*/
proto.types.Task.prototype.setIssuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.types.Issue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Issue}
 */
proto.types.Task.prototype.addIssues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.types.Issue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Task} returns this
 */
proto.types.Task.prototype.clearIssuesList = function() {
  return this.setIssuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Issue.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Issue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Issue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Issue.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    repositoryid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    taskid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    issuenumber: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Issue}
 */
proto.types.Issue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Issue;
  return proto.types.Issue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Issue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Issue}
 */
proto.types.Issue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRepositoryid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTaskid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIssuenumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Issue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Issue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Issue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Issue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRepositoryid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTaskid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getIssuenumber();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.Issue.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Issue} returns this
 */
proto.types.Issue.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 repositoryID = 2;
 * @return {number}
 */
proto.types.Issue.prototype.getRepositoryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Issue} returns this
 */
proto.types.Issue.prototype.setRepositoryid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 taskID = 3;
 * @return {number}
 */
proto.types.Issue.prototype.getTaskid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Issue} returns this
 */
proto.types.Issue.prototype.setTaskid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 issueNumber = 4;
 * @return {number}
 */
proto.types.Issue.prototype.getIssuenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Issue} returns this
 */
proto.types.Issue.prototype.setIssuenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Assignments.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Assignments.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Assignments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Assignments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Assignments.toObject = function(includeInstance, msg) {
  var f, obj = {
    assignmentsList: jspb.Message.toObjectList(msg.getAssignmentsList(),
    proto.types.Assignment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Assignments}
 */
proto.types.Assignments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Assignments;
  return proto.types.Assignments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Assignments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Assignments}
 */
proto.types.Assignments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Assignment;
      reader.readMessage(value,proto.types.Assignment.deserializeBinaryFromReader);
      msg.addAssignments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Assignments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Assignments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Assignments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Assignments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssignmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.Assignment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Assignment assignments = 1;
 * @return {!Array<!proto.types.Assignment>}
 */
proto.types.Assignments.prototype.getAssignmentsList = function() {
  return /** @type{!Array<!proto.types.Assignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Assignment, 1));
};


/**
 * @param {!Array<!proto.types.Assignment>} value
 * @return {!proto.types.Assignments} returns this
*/
proto.types.Assignments.prototype.setAssignmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.Assignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Assignment}
 */
proto.types.Assignments.prototype.addAssignments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Assignment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Assignments} returns this
 */
proto.types.Assignments.prototype.clearAssignmentsList = function() {
  return this.setAssignmentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Submission.repeatedFields_ = [10,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Submission.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Submission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Submission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Submission.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assignmentid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    score: jspb.Message.getFieldWithDefault(msg, 5, 0),
    commithash: jspb.Message.getFieldWithDefault(msg, 6, ""),
    released: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    status: jspb.Message.getFieldWithDefault(msg, 8, 0),
    approveddate: jspb.Message.getFieldWithDefault(msg, 9, ""),
    reviewsList: jspb.Message.toObjectList(msg.getReviewsList(),
    proto.types.Review.toObject, includeInstance),
    buildinfo: (f = msg.getBuildinfo()) && kit_score_score_pb.BuildInfo.toObject(includeInstance, f),
    scoresList: jspb.Message.toObjectList(msg.getScoresList(),
    kit_score_score_pb.Score.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Submission}
 */
proto.types.Submission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Submission;
  return proto.types.Submission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Submission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Submission}
 */
proto.types.Submission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAssignmentid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommithash(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReleased(value);
      break;
    case 8:
      var value = /** @type {!proto.types.Submission.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setApproveddate(value);
      break;
    case 10:
      var value = new proto.types.Review;
      reader.readMessage(value,proto.types.Review.deserializeBinaryFromReader);
      msg.addReviews(value);
      break;
    case 11:
      var value = new kit_score_score_pb.BuildInfo;
      reader.readMessage(value,kit_score_score_pb.BuildInfo.deserializeBinaryFromReader);
      msg.setBuildinfo(value);
      break;
    case 12:
      var value = new kit_score_score_pb.Score;
      reader.readMessage(value,kit_score_score_pb.Score.deserializeBinaryFromReader);
      msg.addScores(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Submission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Submission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Submission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Submission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAssignmentid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getCommithash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReleased();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getApproveddate();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getReviewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.types.Review.serializeBinaryToWriter
    );
  }
  f = message.getBuildinfo();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      kit_score_score_pb.BuildInfo.serializeBinaryToWriter
    );
  }
  f = message.getScoresList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      kit_score_score_pb.Score.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.types.Submission.Status = {
  NONE: 0,
  APPROVED: 1,
  REJECTED: 2,
  REVISION: 3
};

/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.Submission.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 AssignmentID = 2;
 * @return {number}
 */
proto.types.Submission.prototype.getAssignmentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.setAssignmentid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 userID = 3;
 * @return {number}
 */
proto.types.Submission.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 groupID = 4;
 * @return {number}
 */
proto.types.Submission.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 score = 5;
 * @return {number}
 */
proto.types.Submission.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string commitHash = 6;
 * @return {string}
 */
proto.types.Submission.prototype.getCommithash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.setCommithash = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool released = 7;
 * @return {boolean}
 */
proto.types.Submission.prototype.getReleased = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.setReleased = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional Status status = 8;
 * @return {!proto.types.Submission.Status}
 */
proto.types.Submission.prototype.getStatus = function() {
  return /** @type {!proto.types.Submission.Status} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.types.Submission.Status} value
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string approvedDate = 9;
 * @return {string}
 */
proto.types.Submission.prototype.getApproveddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.setApproveddate = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated Review reviews = 10;
 * @return {!Array<!proto.types.Review>}
 */
proto.types.Submission.prototype.getReviewsList = function() {
  return /** @type{!Array<!proto.types.Review>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Review, 10));
};


/**
 * @param {!Array<!proto.types.Review>} value
 * @return {!proto.types.Submission} returns this
*/
proto.types.Submission.prototype.setReviewsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.types.Review=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Review}
 */
proto.types.Submission.prototype.addReviews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.types.Review, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.clearReviewsList = function() {
  return this.setReviewsList([]);
};


/**
 * optional score.BuildInfo BuildInfo = 11;
 * @return {?proto.score.BuildInfo}
 */
proto.types.Submission.prototype.getBuildinfo = function() {
  return /** @type{?proto.score.BuildInfo} */ (
    jspb.Message.getWrapperField(this, kit_score_score_pb.BuildInfo, 11));
};


/**
 * @param {?proto.score.BuildInfo|undefined} value
 * @return {!proto.types.Submission} returns this
*/
proto.types.Submission.prototype.setBuildinfo = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.clearBuildinfo = function() {
  return this.setBuildinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.Submission.prototype.hasBuildinfo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated score.Score Scores = 12;
 * @return {!Array<!proto.score.Score>}
 */
proto.types.Submission.prototype.getScoresList = function() {
  return /** @type{!Array<!proto.score.Score>} */ (
    jspb.Message.getRepeatedWrapperField(this, kit_score_score_pb.Score, 12));
};


/**
 * @param {!Array<!proto.score.Score>} value
 * @return {!proto.types.Submission} returns this
*/
proto.types.Submission.prototype.setScoresList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.score.Score=} opt_value
 * @param {number=} opt_index
 * @return {!proto.score.Score}
 */
proto.types.Submission.prototype.addScores = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.score.Score, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Submission} returns this
 */
proto.types.Submission.prototype.clearScoresList = function() {
  return this.setScoresList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Submissions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Submissions.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Submissions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Submissions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Submissions.toObject = function(includeInstance, msg) {
  var f, obj = {
    submissionsList: jspb.Message.toObjectList(msg.getSubmissionsList(),
    proto.types.Submission.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Submissions}
 */
proto.types.Submissions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Submissions;
  return proto.types.Submissions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Submissions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Submissions}
 */
proto.types.Submissions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Submission;
      reader.readMessage(value,proto.types.Submission.deserializeBinaryFromReader);
      msg.addSubmissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Submissions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Submissions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Submissions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Submissions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubmissionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.Submission.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Submission submissions = 1;
 * @return {!Array<!proto.types.Submission>}
 */
proto.types.Submissions.prototype.getSubmissionsList = function() {
  return /** @type{!Array<!proto.types.Submission>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Submission, 1));
};


/**
 * @param {!Array<!proto.types.Submission>} value
 * @return {!proto.types.Submissions} returns this
*/
proto.types.Submissions.prototype.setSubmissionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.Submission=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Submission}
 */
proto.types.Submissions.prototype.addSubmissions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Submission, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Submissions} returns this
 */
proto.types.Submissions.prototype.clearSubmissionsList = function() {
  return this.setSubmissionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.GradingBenchmark.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.GradingBenchmark.prototype.toObject = function(opt_includeInstance) {
  return proto.types.GradingBenchmark.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.GradingBenchmark} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.GradingBenchmark.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assignmentid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    reviewid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    heading: jspb.Message.getFieldWithDefault(msg, 4, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 5, ""),
    criteriaList: jspb.Message.toObjectList(msg.getCriteriaList(),
    proto.types.GradingCriterion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.GradingBenchmark}
 */
proto.types.GradingBenchmark.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.GradingBenchmark;
  return proto.types.GradingBenchmark.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.GradingBenchmark} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.GradingBenchmark}
 */
proto.types.GradingBenchmark.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAssignmentid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReviewid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeading(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 6:
      var value = new proto.types.GradingCriterion;
      reader.readMessage(value,proto.types.GradingCriterion.deserializeBinaryFromReader);
      msg.addCriteria(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.GradingBenchmark.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.GradingBenchmark.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.GradingBenchmark} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.GradingBenchmark.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAssignmentid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getReviewid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getHeading();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCriteriaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.types.GradingCriterion.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.GradingBenchmark.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.GradingBenchmark} returns this
 */
proto.types.GradingBenchmark.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 AssignmentID = 2;
 * @return {number}
 */
proto.types.GradingBenchmark.prototype.getAssignmentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.GradingBenchmark} returns this
 */
proto.types.GradingBenchmark.prototype.setAssignmentid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 ReviewID = 3;
 * @return {number}
 */
proto.types.GradingBenchmark.prototype.getReviewid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.GradingBenchmark} returns this
 */
proto.types.GradingBenchmark.prototype.setReviewid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string heading = 4;
 * @return {string}
 */
proto.types.GradingBenchmark.prototype.getHeading = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.GradingBenchmark} returns this
 */
proto.types.GradingBenchmark.prototype.setHeading = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string comment = 5;
 * @return {string}
 */
proto.types.GradingBenchmark.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.GradingBenchmark} returns this
 */
proto.types.GradingBenchmark.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated GradingCriterion criteria = 6;
 * @return {!Array<!proto.types.GradingCriterion>}
 */
proto.types.GradingBenchmark.prototype.getCriteriaList = function() {
  return /** @type{!Array<!proto.types.GradingCriterion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.GradingCriterion, 6));
};


/**
 * @param {!Array<!proto.types.GradingCriterion>} value
 * @return {!proto.types.GradingBenchmark} returns this
*/
proto.types.GradingBenchmark.prototype.setCriteriaList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.types.GradingCriterion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.GradingCriterion}
 */
proto.types.GradingBenchmark.prototype.addCriteria = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.types.GradingCriterion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.GradingBenchmark} returns this
 */
proto.types.GradingBenchmark.prototype.clearCriteriaList = function() {
  return this.setCriteriaList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Benchmarks.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Benchmarks.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Benchmarks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Benchmarks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Benchmarks.toObject = function(includeInstance, msg) {
  var f, obj = {
    benchmarksList: jspb.Message.toObjectList(msg.getBenchmarksList(),
    proto.types.GradingBenchmark.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Benchmarks}
 */
proto.types.Benchmarks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Benchmarks;
  return proto.types.Benchmarks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Benchmarks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Benchmarks}
 */
proto.types.Benchmarks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.GradingBenchmark;
      reader.readMessage(value,proto.types.GradingBenchmark.deserializeBinaryFromReader);
      msg.addBenchmarks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Benchmarks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Benchmarks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Benchmarks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Benchmarks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBenchmarksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.GradingBenchmark.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GradingBenchmark benchmarks = 1;
 * @return {!Array<!proto.types.GradingBenchmark>}
 */
proto.types.Benchmarks.prototype.getBenchmarksList = function() {
  return /** @type{!Array<!proto.types.GradingBenchmark>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.GradingBenchmark, 1));
};


/**
 * @param {!Array<!proto.types.GradingBenchmark>} value
 * @return {!proto.types.Benchmarks} returns this
*/
proto.types.Benchmarks.prototype.setBenchmarksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.GradingBenchmark=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.GradingBenchmark}
 */
proto.types.Benchmarks.prototype.addBenchmarks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.GradingBenchmark, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Benchmarks} returns this
 */
proto.types.Benchmarks.prototype.clearBenchmarksList = function() {
  return this.setBenchmarksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.GradingCriterion.prototype.toObject = function(opt_includeInstance) {
  return proto.types.GradingCriterion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.GradingCriterion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.GradingCriterion.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    benchmarkid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    points: jspb.Message.getFieldWithDefault(msg, 3, 0),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    grade: jspb.Message.getFieldWithDefault(msg, 5, 0),
    comment: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.GradingCriterion}
 */
proto.types.GradingCriterion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.GradingCriterion;
  return proto.types.GradingCriterion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.GradingCriterion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.GradingCriterion}
 */
proto.types.GradingCriterion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBenchmarkid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoints(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {!proto.types.GradingCriterion.Grade} */ (reader.readEnum());
      msg.setGrade(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.GradingCriterion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.GradingCriterion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.GradingCriterion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.GradingCriterion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBenchmarkid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPoints();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGrade();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.types.GradingCriterion.Grade = {
  NONE: 0,
  FAILED: 1,
  PASSED: 2
};

/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.GradingCriterion.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.GradingCriterion} returns this
 */
proto.types.GradingCriterion.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 BenchmarkID = 2;
 * @return {number}
 */
proto.types.GradingCriterion.prototype.getBenchmarkid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.GradingCriterion} returns this
 */
proto.types.GradingCriterion.prototype.setBenchmarkid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 points = 3;
 * @return {number}
 */
proto.types.GradingCriterion.prototype.getPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.GradingCriterion} returns this
 */
proto.types.GradingCriterion.prototype.setPoints = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.types.GradingCriterion.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.GradingCriterion} returns this
 */
proto.types.GradingCriterion.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Grade grade = 5;
 * @return {!proto.types.GradingCriterion.Grade}
 */
proto.types.GradingCriterion.prototype.getGrade = function() {
  return /** @type {!proto.types.GradingCriterion.Grade} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.types.GradingCriterion.Grade} value
 * @return {!proto.types.GradingCriterion} returns this
 */
proto.types.GradingCriterion.prototype.setGrade = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string comment = 6;
 * @return {string}
 */
proto.types.GradingCriterion.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.GradingCriterion} returns this
 */
proto.types.GradingCriterion.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Review.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Review.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Review.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Review} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Review.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    submissionid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    reviewerid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    feedback: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ready: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    score: jspb.Message.getFieldWithDefault(msg, 6, 0),
    gradingbenchmarksList: jspb.Message.toObjectList(msg.getGradingbenchmarksList(),
    proto.types.GradingBenchmark.toObject, includeInstance),
    edited: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Review}
 */
proto.types.Review.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Review;
  return proto.types.Review.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Review} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Review}
 */
proto.types.Review.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubmissionid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReviewerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedback(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReady(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 7:
      var value = new proto.types.GradingBenchmark;
      reader.readMessage(value,proto.types.GradingBenchmark.deserializeBinaryFromReader);
      msg.addGradingbenchmarks(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEdited(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Review.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Review.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Review} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Review.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSubmissionid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getReviewerid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFeedback();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReady();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getGradingbenchmarksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.types.GradingBenchmark.serializeBinaryToWriter
    );
  }
  f = message.getEdited();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.Review.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Review} returns this
 */
proto.types.Review.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 SubmissionID = 2;
 * @return {number}
 */
proto.types.Review.prototype.getSubmissionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Review} returns this
 */
proto.types.Review.prototype.setSubmissionid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 ReviewerID = 3;
 * @return {number}
 */
proto.types.Review.prototype.getReviewerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Review} returns this
 */
proto.types.Review.prototype.setReviewerid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string feedback = 4;
 * @return {string}
 */
proto.types.Review.prototype.getFeedback = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Review} returns this
 */
proto.types.Review.prototype.setFeedback = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool ready = 5;
 * @return {boolean}
 */
proto.types.Review.prototype.getReady = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.Review} returns this
 */
proto.types.Review.prototype.setReady = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 score = 6;
 * @return {number}
 */
proto.types.Review.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.Review} returns this
 */
proto.types.Review.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated GradingBenchmark gradingBenchmarks = 7;
 * @return {!Array<!proto.types.GradingBenchmark>}
 */
proto.types.Review.prototype.getGradingbenchmarksList = function() {
  return /** @type{!Array<!proto.types.GradingBenchmark>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.GradingBenchmark, 7));
};


/**
 * @param {!Array<!proto.types.GradingBenchmark>} value
 * @return {!proto.types.Review} returns this
*/
proto.types.Review.prototype.setGradingbenchmarksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.types.GradingBenchmark=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.GradingBenchmark}
 */
proto.types.Review.prototype.addGradingbenchmarks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.types.GradingBenchmark, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Review} returns this
 */
proto.types.Review.prototype.clearGradingbenchmarksList = function() {
  return this.setGradingbenchmarksList([]);
};


/**
 * optional string edited = 8;
 * @return {string}
 */
proto.types.Review.prototype.getEdited = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Review} returns this
 */
proto.types.Review.prototype.setEdited = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


goog.object.extend(exports, proto.types);
