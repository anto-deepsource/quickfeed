syntax = "proto3";
package types;
option go_package = "github.com/autograde/quickfeed/ag/types";
import "ag/types/types.proto";

// Collection of all message types that are used as requests and responses in gRPC calls.

message ReviewRequest {
    uint64 courseID     = 1;
    types.Review review = 2;
}

message BenchmarkRequest {
    uint64 courseID                  = 1;
    types.GradingBenchmark benchmark = 2;
}

message CriteriaRequest {
    uint64 courseID                  = 1;
    types.GradingCriterion criterion = 2;
}

message CourseRequest {
    uint64 courseID = 1;
}

message UserRequest {
    uint64 userID = 1;
}

message GetGroupRequest {
    uint64 groupID = 1;
}

message GroupRequest {
    uint64 userID   = 1;
    uint64 groupID  = 2;
    uint64 courseID = 3;
}

message OrgRequest {
    string orgName = 1;
}

// EnrollmentRequest is a request for enrolled users of a given course,
// whose enrollment status match those provided in the request. To ignore group members
// that otherwise match the enrollment request, set ignoreGroupMembers to true.
message EnrollmentRequest {
    uint64 courseID                               = 1;
    bool ignoreGroupMembers                       = 2;
    bool withActivity                             = 3;
    repeated types.Enrollment.UserStatus statuses = 4;
}

// EnrollmentStatusRequest is a request for a given user, with a specific enrollment status.
message EnrollmentStatusRequest {
    uint64 userID                                 = 1;
    repeated types.Enrollment.UserStatus statuses = 2;
}

message SubmissionRequest {
    uint64 userID   = 1;
    uint64 groupID  = 2;
    uint64 courseID = 3;
}

message UpdateSubmissionRequest {
    uint64 submissionID            = 1;
    uint64 courseID                = 2;
    uint32 score                   = 3;
    bool released                  = 4;
    types.Submission.Status status = 5;
}

message UpdateSubmissionsRequest {
    uint64 courseID     = 1;
    uint64 assignmentID = 2;
    uint32 scoreLimit   = 3;
    bool release        = 4;
    bool approve        = 5;
}

message SubmissionReviewersRequest {
    uint64 submissionID = 1;
    uint64 courseID     = 2;
}

message SubmissionsForCourseRequest {
    enum Type {
        ALL        = 0;
        INDIVIDUAL = 1;
        GROUP      = 2;
    }
    uint64 courseID    = 1;
    Type type          = 2;
    bool withBuildInfo = 3;
}

message RebuildRequest {
    oneof rebuildType {
        uint64 submissionID = 1;
        uint64 courseID     = 2;
    }
    uint64 assignmentID = 3;
}

message CourseUserRequest {
    string courseCode = 1;
    uint32 courseYear = 2;
    string userLogin  = 3;
}

//   UI structures, never saved in the database   //
message SubmissionLink {
    types.Assignment assignment = 1;
    types.Submission submission = 2;
}

message EnrollmentLink {
    types.Enrollment enrollment               = 2;  // must have course and user/group preloaded
    repeated types.SubmissionLink submissions = 3;
}

message CourseSubmissions {
    types.Course course                 = 1;  // preloaded assignments
    repeated types.EnrollmentLink links = 2;
}

message Provider {
    string provider = 1;
}

message Organization {
    uint64 ID          = 1;
    string path        = 2;
    string avatar      = 3;
    string paymentPlan = 4;
}

message Organizations {
    repeated types.Organization organizations = 1;
}

message Providers {
    repeated string providers = 1;
}

message URLRequest {
    uint64 courseID                          = 1;
    repeated types.Repository.Type repoTypes = 2;
}

// used to check whether student/group submission repo is empty
message RepositoryRequest {
    uint64 userID   = 1;
    uint64 groupID  = 2;
    uint64 courseID = 3;
}

message Repositories {
    map<string, string> URLs = 1;
}

message Reviewers {
    repeated types.User reviewers = 1;
}

message Status {
    uint64 Code  = 1;
    string Error = 2;
}

// Void contains no fields. A server response with a Void still contains a gRPC status code,
// which can be checked for success or failure. Status code 0 indicates that the requested action was successful,
// whereas any other status code indicates some failure. As such, the status code can be used as a boolean result from
// the server.
message Void {}
