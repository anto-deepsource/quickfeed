// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: ag/ag.proto

package ag

import (
	context "context"
	types "github.com/autograde/quickfeed/ag/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AutograderServiceClient is the client API for AutograderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutograderServiceClient interface {
	GetUser(ctx context.Context, in *types.Void, opts ...grpc.CallOption) (*types.User, error)
	GetUsers(ctx context.Context, in *types.Void, opts ...grpc.CallOption) (*types.Users, error)
	GetUserByCourse(ctx context.Context, in *types.CourseUserRequest, opts ...grpc.CallOption) (*types.User, error)
	UpdateUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*types.Void, error)
	GetGroup(ctx context.Context, in *types.GetGroupRequest, opts ...grpc.CallOption) (*types.Group, error)
	GetGroupByUserAndCourse(ctx context.Context, in *types.GroupRequest, opts ...grpc.CallOption) (*types.Group, error)
	GetGroupsByCourse(ctx context.Context, in *types.CourseRequest, opts ...grpc.CallOption) (*types.Groups, error)
	CreateGroup(ctx context.Context, in *types.Group, opts ...grpc.CallOption) (*types.Group, error)
	UpdateGroup(ctx context.Context, in *types.Group, opts ...grpc.CallOption) (*types.Void, error)
	DeleteGroup(ctx context.Context, in *types.GroupRequest, opts ...grpc.CallOption) (*types.Void, error)
	GetCourse(ctx context.Context, in *types.CourseRequest, opts ...grpc.CallOption) (*types.Course, error)
	GetCourses(ctx context.Context, in *types.Void, opts ...grpc.CallOption) (*types.Courses, error)
	GetCoursesByUser(ctx context.Context, in *types.EnrollmentStatusRequest, opts ...grpc.CallOption) (*types.Courses, error)
	CreateCourse(ctx context.Context, in *types.Course, opts ...grpc.CallOption) (*types.Course, error)
	UpdateCourse(ctx context.Context, in *types.Course, opts ...grpc.CallOption) (*types.Void, error)
	UpdateCourseVisibility(ctx context.Context, in *types.Enrollment, opts ...grpc.CallOption) (*types.Void, error)
	GetAssignments(ctx context.Context, in *types.CourseRequest, opts ...grpc.CallOption) (*types.Assignments, error)
	UpdateAssignments(ctx context.Context, in *types.CourseRequest, opts ...grpc.CallOption) (*types.Void, error)
	GetEnrollmentsByUser(ctx context.Context, in *types.EnrollmentStatusRequest, opts ...grpc.CallOption) (*types.Enrollments, error)
	GetEnrollmentsByCourse(ctx context.Context, in *types.EnrollmentRequest, opts ...grpc.CallOption) (*types.Enrollments, error)
	CreateEnrollment(ctx context.Context, in *types.Enrollment, opts ...grpc.CallOption) (*types.Void, error)
	UpdateEnrollments(ctx context.Context, in *types.Enrollments, opts ...grpc.CallOption) (*types.Void, error)
	// Get latest submissions for all course assignments for a user or a group.
	GetSubmissions(ctx context.Context, in *types.SubmissionRequest, opts ...grpc.CallOption) (*types.Submissions, error)
	// Get lab submissions for every course user or every course group
	GetSubmissionsByCourse(ctx context.Context, in *types.SubmissionsForCourseRequest, opts ...grpc.CallOption) (*types.CourseSubmissions, error)
	UpdateSubmission(ctx context.Context, in *types.UpdateSubmissionRequest, opts ...grpc.CallOption) (*types.Void, error)
	UpdateSubmissions(ctx context.Context, in *types.UpdateSubmissionsRequest, opts ...grpc.CallOption) (*types.Void, error)
	RebuildSubmissions(ctx context.Context, in *types.RebuildRequest, opts ...grpc.CallOption) (*types.Void, error)
	CreateBenchmark(ctx context.Context, in *types.BenchmarkRequest, opts ...grpc.CallOption) (*types.GradingBenchmark, error)
	UpdateBenchmark(ctx context.Context, in *types.BenchmarkRequest, opts ...grpc.CallOption) (*types.Void, error)
	DeleteBenchmark(ctx context.Context, in *types.BenchmarkRequest, opts ...grpc.CallOption) (*types.Void, error)
	CreateCriterion(ctx context.Context, in *types.CriteriaRequest, opts ...grpc.CallOption) (*types.GradingCriterion, error)
	UpdateCriterion(ctx context.Context, in *types.CriteriaRequest, opts ...grpc.CallOption) (*types.Void, error)
	DeleteCriterion(ctx context.Context, in *types.CriteriaRequest, opts ...grpc.CallOption) (*types.Void, error)
	CreateReview(ctx context.Context, in *types.ReviewRequest, opts ...grpc.CallOption) (*types.Review, error)
	UpdateReview(ctx context.Context, in *types.ReviewRequest, opts ...grpc.CallOption) (*types.Review, error)
	GetReviewers(ctx context.Context, in *types.SubmissionReviewersRequest, opts ...grpc.CallOption) (*types.Reviewers, error)
	GetProviders(ctx context.Context, in *types.Void, opts ...grpc.CallOption) (*types.Providers, error)
	GetOrganization(ctx context.Context, in *types.OrgRequest, opts ...grpc.CallOption) (*types.Organization, error)
	GetRepositories(ctx context.Context, in *types.URLRequest, opts ...grpc.CallOption) (*types.Repositories, error)
	IsEmptyRepo(ctx context.Context, in *types.RepositoryRequest, opts ...grpc.CallOption) (*types.Void, error)
}

type autograderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAutograderServiceClient(cc grpc.ClientConnInterface) AutograderServiceClient {
	return &autograderServiceClient{cc}
}

func (c *autograderServiceClient) GetUser(ctx context.Context, in *types.Void, opts ...grpc.CallOption) (*types.User, error) {
	out := new(types.User)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetUsers(ctx context.Context, in *types.Void, opts ...grpc.CallOption) (*types.Users, error) {
	out := new(types.Users)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetUserByCourse(ctx context.Context, in *types.CourseUserRequest, opts ...grpc.CallOption) (*types.User, error) {
	out := new(types.User)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetUserByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetGroup(ctx context.Context, in *types.GetGroupRequest, opts ...grpc.CallOption) (*types.Group, error) {
	out := new(types.Group)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetGroupByUserAndCourse(ctx context.Context, in *types.GroupRequest, opts ...grpc.CallOption) (*types.Group, error) {
	out := new(types.Group)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetGroupByUserAndCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetGroupsByCourse(ctx context.Context, in *types.CourseRequest, opts ...grpc.CallOption) (*types.Groups, error) {
	out := new(types.Groups)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetGroupsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateGroup(ctx context.Context, in *types.Group, opts ...grpc.CallOption) (*types.Group, error) {
	out := new(types.Group)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateGroup(ctx context.Context, in *types.Group, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) DeleteGroup(ctx context.Context, in *types.GroupRequest, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetCourse(ctx context.Context, in *types.CourseRequest, opts ...grpc.CallOption) (*types.Course, error) {
	out := new(types.Course)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetCourses(ctx context.Context, in *types.Void, opts ...grpc.CallOption) (*types.Courses, error) {
	out := new(types.Courses)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetCoursesByUser(ctx context.Context, in *types.EnrollmentStatusRequest, opts ...grpc.CallOption) (*types.Courses, error) {
	out := new(types.Courses)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetCoursesByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateCourse(ctx context.Context, in *types.Course, opts ...grpc.CallOption) (*types.Course, error) {
	out := new(types.Course)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/CreateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateCourse(ctx context.Context, in *types.Course, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/UpdateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateCourseVisibility(ctx context.Context, in *types.Enrollment, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/UpdateCourseVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetAssignments(ctx context.Context, in *types.CourseRequest, opts ...grpc.CallOption) (*types.Assignments, error) {
	out := new(types.Assignments)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateAssignments(ctx context.Context, in *types.CourseRequest, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/UpdateAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetEnrollmentsByUser(ctx context.Context, in *types.EnrollmentStatusRequest, opts ...grpc.CallOption) (*types.Enrollments, error) {
	out := new(types.Enrollments)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetEnrollmentsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetEnrollmentsByCourse(ctx context.Context, in *types.EnrollmentRequest, opts ...grpc.CallOption) (*types.Enrollments, error) {
	out := new(types.Enrollments)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetEnrollmentsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateEnrollment(ctx context.Context, in *types.Enrollment, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/CreateEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateEnrollments(ctx context.Context, in *types.Enrollments, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/UpdateEnrollments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetSubmissions(ctx context.Context, in *types.SubmissionRequest, opts ...grpc.CallOption) (*types.Submissions, error) {
	out := new(types.Submissions)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetSubmissionsByCourse(ctx context.Context, in *types.SubmissionsForCourseRequest, opts ...grpc.CallOption) (*types.CourseSubmissions, error) {
	out := new(types.CourseSubmissions)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetSubmissionsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateSubmission(ctx context.Context, in *types.UpdateSubmissionRequest, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/UpdateSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateSubmissions(ctx context.Context, in *types.UpdateSubmissionsRequest, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/UpdateSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) RebuildSubmissions(ctx context.Context, in *types.RebuildRequest, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/RebuildSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateBenchmark(ctx context.Context, in *types.BenchmarkRequest, opts ...grpc.CallOption) (*types.GradingBenchmark, error) {
	out := new(types.GradingBenchmark)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/CreateBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateBenchmark(ctx context.Context, in *types.BenchmarkRequest, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/UpdateBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) DeleteBenchmark(ctx context.Context, in *types.BenchmarkRequest, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/DeleteBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateCriterion(ctx context.Context, in *types.CriteriaRequest, opts ...grpc.CallOption) (*types.GradingCriterion, error) {
	out := new(types.GradingCriterion)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/CreateCriterion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateCriterion(ctx context.Context, in *types.CriteriaRequest, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/UpdateCriterion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) DeleteCriterion(ctx context.Context, in *types.CriteriaRequest, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/DeleteCriterion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateReview(ctx context.Context, in *types.ReviewRequest, opts ...grpc.CallOption) (*types.Review, error) {
	out := new(types.Review)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateReview(ctx context.Context, in *types.ReviewRequest, opts ...grpc.CallOption) (*types.Review, error) {
	out := new(types.Review)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/UpdateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetReviewers(ctx context.Context, in *types.SubmissionReviewersRequest, opts ...grpc.CallOption) (*types.Reviewers, error) {
	out := new(types.Reviewers)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetReviewers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetProviders(ctx context.Context, in *types.Void, opts ...grpc.CallOption) (*types.Providers, error) {
	out := new(types.Providers)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetOrganization(ctx context.Context, in *types.OrgRequest, opts ...grpc.CallOption) (*types.Organization, error) {
	out := new(types.Organization)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetRepositories(ctx context.Context, in *types.URLRequest, opts ...grpc.CallOption) (*types.Repositories, error) {
	out := new(types.Repositories)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/GetRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) IsEmptyRepo(ctx context.Context, in *types.RepositoryRequest, opts ...grpc.CallOption) (*types.Void, error) {
	out := new(types.Void)
	err := c.cc.Invoke(ctx, "/ag.AutograderService/IsEmptyRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutograderServiceServer is the server API for AutograderService service.
// All implementations must embed UnimplementedAutograderServiceServer
// for forward compatibility
type AutograderServiceServer interface {
	GetUser(context.Context, *types.Void) (*types.User, error)
	GetUsers(context.Context, *types.Void) (*types.Users, error)
	GetUserByCourse(context.Context, *types.CourseUserRequest) (*types.User, error)
	UpdateUser(context.Context, *types.User) (*types.Void, error)
	GetGroup(context.Context, *types.GetGroupRequest) (*types.Group, error)
	GetGroupByUserAndCourse(context.Context, *types.GroupRequest) (*types.Group, error)
	GetGroupsByCourse(context.Context, *types.CourseRequest) (*types.Groups, error)
	CreateGroup(context.Context, *types.Group) (*types.Group, error)
	UpdateGroup(context.Context, *types.Group) (*types.Void, error)
	DeleteGroup(context.Context, *types.GroupRequest) (*types.Void, error)
	GetCourse(context.Context, *types.CourseRequest) (*types.Course, error)
	GetCourses(context.Context, *types.Void) (*types.Courses, error)
	GetCoursesByUser(context.Context, *types.EnrollmentStatusRequest) (*types.Courses, error)
	CreateCourse(context.Context, *types.Course) (*types.Course, error)
	UpdateCourse(context.Context, *types.Course) (*types.Void, error)
	UpdateCourseVisibility(context.Context, *types.Enrollment) (*types.Void, error)
	GetAssignments(context.Context, *types.CourseRequest) (*types.Assignments, error)
	UpdateAssignments(context.Context, *types.CourseRequest) (*types.Void, error)
	GetEnrollmentsByUser(context.Context, *types.EnrollmentStatusRequest) (*types.Enrollments, error)
	GetEnrollmentsByCourse(context.Context, *types.EnrollmentRequest) (*types.Enrollments, error)
	CreateEnrollment(context.Context, *types.Enrollment) (*types.Void, error)
	UpdateEnrollments(context.Context, *types.Enrollments) (*types.Void, error)
	// Get latest submissions for all course assignments for a user or a group.
	GetSubmissions(context.Context, *types.SubmissionRequest) (*types.Submissions, error)
	// Get lab submissions for every course user or every course group
	GetSubmissionsByCourse(context.Context, *types.SubmissionsForCourseRequest) (*types.CourseSubmissions, error)
	UpdateSubmission(context.Context, *types.UpdateSubmissionRequest) (*types.Void, error)
	UpdateSubmissions(context.Context, *types.UpdateSubmissionsRequest) (*types.Void, error)
	RebuildSubmissions(context.Context, *types.RebuildRequest) (*types.Void, error)
	CreateBenchmark(context.Context, *types.BenchmarkRequest) (*types.GradingBenchmark, error)
	UpdateBenchmark(context.Context, *types.BenchmarkRequest) (*types.Void, error)
	DeleteBenchmark(context.Context, *types.BenchmarkRequest) (*types.Void, error)
	CreateCriterion(context.Context, *types.CriteriaRequest) (*types.GradingCriterion, error)
	UpdateCriterion(context.Context, *types.CriteriaRequest) (*types.Void, error)
	DeleteCriterion(context.Context, *types.CriteriaRequest) (*types.Void, error)
	CreateReview(context.Context, *types.ReviewRequest) (*types.Review, error)
	UpdateReview(context.Context, *types.ReviewRequest) (*types.Review, error)
	GetReviewers(context.Context, *types.SubmissionReviewersRequest) (*types.Reviewers, error)
	GetProviders(context.Context, *types.Void) (*types.Providers, error)
	GetOrganization(context.Context, *types.OrgRequest) (*types.Organization, error)
	GetRepositories(context.Context, *types.URLRequest) (*types.Repositories, error)
	IsEmptyRepo(context.Context, *types.RepositoryRequest) (*types.Void, error)
	mustEmbedUnimplementedAutograderServiceServer()
}

// UnimplementedAutograderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAutograderServiceServer struct {
}

func (UnimplementedAutograderServiceServer) GetUser(context.Context, *types.Void) (*types.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAutograderServiceServer) GetUsers(context.Context, *types.Void) (*types.Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedAutograderServiceServer) GetUserByCourse(context.Context, *types.CourseUserRequest) (*types.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByCourse not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateUser(context.Context, *types.User) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAutograderServiceServer) GetGroup(context.Context, *types.GetGroupRequest) (*types.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedAutograderServiceServer) GetGroupByUserAndCourse(context.Context, *types.GroupRequest) (*types.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByUserAndCourse not implemented")
}
func (UnimplementedAutograderServiceServer) GetGroupsByCourse(context.Context, *types.CourseRequest) (*types.Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsByCourse not implemented")
}
func (UnimplementedAutograderServiceServer) CreateGroup(context.Context, *types.Group) (*types.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateGroup(context.Context, *types.Group) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedAutograderServiceServer) DeleteGroup(context.Context, *types.GroupRequest) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedAutograderServiceServer) GetCourse(context.Context, *types.CourseRequest) (*types.Course, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedAutograderServiceServer) GetCourses(context.Context, *types.Void) (*types.Courses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourses not implemented")
}
func (UnimplementedAutograderServiceServer) GetCoursesByUser(context.Context, *types.EnrollmentStatusRequest) (*types.Courses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesByUser not implemented")
}
func (UnimplementedAutograderServiceServer) CreateCourse(context.Context, *types.Course) (*types.Course, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateCourse(context.Context, *types.Course) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateCourseVisibility(context.Context, *types.Enrollment) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourseVisibility not implemented")
}
func (UnimplementedAutograderServiceServer) GetAssignments(context.Context, *types.CourseRequest) (*types.Assignments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignments not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateAssignments(context.Context, *types.CourseRequest) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssignments not implemented")
}
func (UnimplementedAutograderServiceServer) GetEnrollmentsByUser(context.Context, *types.EnrollmentStatusRequest) (*types.Enrollments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentsByUser not implemented")
}
func (UnimplementedAutograderServiceServer) GetEnrollmentsByCourse(context.Context, *types.EnrollmentRequest) (*types.Enrollments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentsByCourse not implemented")
}
func (UnimplementedAutograderServiceServer) CreateEnrollment(context.Context, *types.Enrollment) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollment not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateEnrollments(context.Context, *types.Enrollments) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnrollments not implemented")
}
func (UnimplementedAutograderServiceServer) GetSubmissions(context.Context, *types.SubmissionRequest) (*types.Submissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissions not implemented")
}
func (UnimplementedAutograderServiceServer) GetSubmissionsByCourse(context.Context, *types.SubmissionsForCourseRequest) (*types.CourseSubmissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionsByCourse not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateSubmission(context.Context, *types.UpdateSubmissionRequest) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubmission not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateSubmissions(context.Context, *types.UpdateSubmissionsRequest) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubmissions not implemented")
}
func (UnimplementedAutograderServiceServer) RebuildSubmissions(context.Context, *types.RebuildRequest) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildSubmissions not implemented")
}
func (UnimplementedAutograderServiceServer) CreateBenchmark(context.Context, *types.BenchmarkRequest) (*types.GradingBenchmark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBenchmark not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateBenchmark(context.Context, *types.BenchmarkRequest) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBenchmark not implemented")
}
func (UnimplementedAutograderServiceServer) DeleteBenchmark(context.Context, *types.BenchmarkRequest) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBenchmark not implemented")
}
func (UnimplementedAutograderServiceServer) CreateCriterion(context.Context, *types.CriteriaRequest) (*types.GradingCriterion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCriterion not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateCriterion(context.Context, *types.CriteriaRequest) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCriterion not implemented")
}
func (UnimplementedAutograderServiceServer) DeleteCriterion(context.Context, *types.CriteriaRequest) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCriterion not implemented")
}
func (UnimplementedAutograderServiceServer) CreateReview(context.Context, *types.ReviewRequest) (*types.Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedAutograderServiceServer) UpdateReview(context.Context, *types.ReviewRequest) (*types.Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedAutograderServiceServer) GetReviewers(context.Context, *types.SubmissionReviewersRequest) (*types.Reviewers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewers not implemented")
}
func (UnimplementedAutograderServiceServer) GetProviders(context.Context, *types.Void) (*types.Providers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviders not implemented")
}
func (UnimplementedAutograderServiceServer) GetOrganization(context.Context, *types.OrgRequest) (*types.Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedAutograderServiceServer) GetRepositories(context.Context, *types.URLRequest) (*types.Repositories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositories not implemented")
}
func (UnimplementedAutograderServiceServer) IsEmptyRepo(context.Context, *types.RepositoryRequest) (*types.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEmptyRepo not implemented")
}
func (UnimplementedAutograderServiceServer) mustEmbedUnimplementedAutograderServiceServer() {}

// UnsafeAutograderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutograderServiceServer will
// result in compilation errors.
type UnsafeAutograderServiceServer interface {
	mustEmbedUnimplementedAutograderServiceServer()
}

func RegisterAutograderServiceServer(s grpc.ServiceRegistrar, srv AutograderServiceServer) {
	s.RegisterService(&AutograderService_ServiceDesc, srv)
}

func _AutograderService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetUser(ctx, req.(*types.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetUsers(ctx, req.(*types.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetUserByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.CourseUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetUserByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetUserByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetUserByCourse(ctx, req.(*types.CourseUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateUser(ctx, req.(*types.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetGroup(ctx, req.(*types.GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetGroupByUserAndCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetGroupByUserAndCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetGroupByUserAndCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetGroupByUserAndCourse(ctx, req.(*types.GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetGroupsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetGroupsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetGroupsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetGroupsByCourse(ctx, req.(*types.CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateGroup(ctx, req.(*types.Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateGroup(ctx, req.(*types.Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).DeleteGroup(ctx, req.(*types.GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetCourse(ctx, req.(*types.CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetCourses(ctx, req.(*types.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetCoursesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.EnrollmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetCoursesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetCoursesByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetCoursesByUser(ctx, req.(*types.EnrollmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/CreateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateCourse(ctx, req.(*types.Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/UpdateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateCourse(ctx, req.(*types.Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateCourseVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Enrollment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateCourseVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/UpdateCourseVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateCourseVisibility(ctx, req.(*types.Enrollment))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetAssignments(ctx, req.(*types.CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/UpdateAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateAssignments(ctx, req.(*types.CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetEnrollmentsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.EnrollmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetEnrollmentsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetEnrollmentsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetEnrollmentsByUser(ctx, req.(*types.EnrollmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetEnrollmentsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.EnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetEnrollmentsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetEnrollmentsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetEnrollmentsByCourse(ctx, req.(*types.EnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Enrollment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/CreateEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateEnrollment(ctx, req.(*types.Enrollment))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateEnrollments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Enrollments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateEnrollments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/UpdateEnrollments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateEnrollments(ctx, req.(*types.Enrollments))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetSubmissions(ctx, req.(*types.SubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetSubmissionsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubmissionsForCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetSubmissionsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetSubmissionsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetSubmissionsByCourse(ctx, req.(*types.SubmissionsForCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UpdateSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/UpdateSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateSubmission(ctx, req.(*types.UpdateSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UpdateSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/UpdateSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateSubmissions(ctx, req.(*types.UpdateSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_RebuildSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).RebuildSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/RebuildSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).RebuildSubmissions(ctx, req.(*types.RebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.BenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/CreateBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateBenchmark(ctx, req.(*types.BenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.BenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/UpdateBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateBenchmark(ctx, req.(*types.BenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_DeleteBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.BenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).DeleteBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/DeleteBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).DeleteBenchmark(ctx, req.(*types.BenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateCriterion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.CriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateCriterion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/CreateCriterion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateCriterion(ctx, req.(*types.CriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateCriterion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.CriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateCriterion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/UpdateCriterion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateCriterion(ctx, req.(*types.CriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_DeleteCriterion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.CriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).DeleteCriterion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/DeleteCriterion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).DeleteCriterion(ctx, req.(*types.CriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateReview(ctx, req.(*types.ReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/UpdateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateReview(ctx, req.(*types.ReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetReviewers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SubmissionReviewersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetReviewers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetReviewers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetReviewers(ctx, req.(*types.SubmissionReviewersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetProviders(ctx, req.(*types.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.OrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetOrganization(ctx, req.(*types.OrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.URLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/GetRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetRepositories(ctx, req.(*types.URLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_IsEmptyRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).IsEmptyRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ag.AutograderService/IsEmptyRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).IsEmptyRepo(ctx, req.(*types.RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AutograderService_ServiceDesc is the grpc.ServiceDesc for AutograderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutograderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ag.AutograderService",
	HandlerType: (*AutograderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _AutograderService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _AutograderService_GetUsers_Handler,
		},
		{
			MethodName: "GetUserByCourse",
			Handler:    _AutograderService_GetUserByCourse_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AutograderService_UpdateUser_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _AutograderService_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupByUserAndCourse",
			Handler:    _AutograderService_GetGroupByUserAndCourse_Handler,
		},
		{
			MethodName: "GetGroupsByCourse",
			Handler:    _AutograderService_GetGroupsByCourse_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _AutograderService_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _AutograderService_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _AutograderService_DeleteGroup_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _AutograderService_GetCourse_Handler,
		},
		{
			MethodName: "GetCourses",
			Handler:    _AutograderService_GetCourses_Handler,
		},
		{
			MethodName: "GetCoursesByUser",
			Handler:    _AutograderService_GetCoursesByUser_Handler,
		},
		{
			MethodName: "CreateCourse",
			Handler:    _AutograderService_CreateCourse_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _AutograderService_UpdateCourse_Handler,
		},
		{
			MethodName: "UpdateCourseVisibility",
			Handler:    _AutograderService_UpdateCourseVisibility_Handler,
		},
		{
			MethodName: "GetAssignments",
			Handler:    _AutograderService_GetAssignments_Handler,
		},
		{
			MethodName: "UpdateAssignments",
			Handler:    _AutograderService_UpdateAssignments_Handler,
		},
		{
			MethodName: "GetEnrollmentsByUser",
			Handler:    _AutograderService_GetEnrollmentsByUser_Handler,
		},
		{
			MethodName: "GetEnrollmentsByCourse",
			Handler:    _AutograderService_GetEnrollmentsByCourse_Handler,
		},
		{
			MethodName: "CreateEnrollment",
			Handler:    _AutograderService_CreateEnrollment_Handler,
		},
		{
			MethodName: "UpdateEnrollments",
			Handler:    _AutograderService_UpdateEnrollments_Handler,
		},
		{
			MethodName: "GetSubmissions",
			Handler:    _AutograderService_GetSubmissions_Handler,
		},
		{
			MethodName: "GetSubmissionsByCourse",
			Handler:    _AutograderService_GetSubmissionsByCourse_Handler,
		},
		{
			MethodName: "UpdateSubmission",
			Handler:    _AutograderService_UpdateSubmission_Handler,
		},
		{
			MethodName: "UpdateSubmissions",
			Handler:    _AutograderService_UpdateSubmissions_Handler,
		},
		{
			MethodName: "RebuildSubmissions",
			Handler:    _AutograderService_RebuildSubmissions_Handler,
		},
		{
			MethodName: "CreateBenchmark",
			Handler:    _AutograderService_CreateBenchmark_Handler,
		},
		{
			MethodName: "UpdateBenchmark",
			Handler:    _AutograderService_UpdateBenchmark_Handler,
		},
		{
			MethodName: "DeleteBenchmark",
			Handler:    _AutograderService_DeleteBenchmark_Handler,
		},
		{
			MethodName: "CreateCriterion",
			Handler:    _AutograderService_CreateCriterion_Handler,
		},
		{
			MethodName: "UpdateCriterion",
			Handler:    _AutograderService_UpdateCriterion_Handler,
		},
		{
			MethodName: "DeleteCriterion",
			Handler:    _AutograderService_DeleteCriterion_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _AutograderService_CreateReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _AutograderService_UpdateReview_Handler,
		},
		{
			MethodName: "GetReviewers",
			Handler:    _AutograderService_GetReviewers_Handler,
		},
		{
			MethodName: "GetProviders",
			Handler:    _AutograderService_GetProviders_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _AutograderService_GetOrganization_Handler,
		},
		{
			MethodName: "GetRepositories",
			Handler:    _AutograderService_GetRepositories_Handler,
		},
		{
			MethodName: "IsEmptyRepo",
			Handler:    _AutograderService_IsEmptyRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ag/ag.proto",
}
