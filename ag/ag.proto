syntax = "proto3";
package ag;
option go_package   = "github.com/autograde/quickfeed/ag";
option swift_prefix = "";

import "ag/types/types.proto";
import "ag/types/requests.proto";

service AutograderService {
    // users //

    rpc GetUser(types.Void) returns (types.User) {}
    rpc GetUsers(types.Void) returns (types.Users) {}
    rpc GetUserByCourse(types.CourseUserRequest) returns (types.User) {}
    rpc UpdateUser(types.User) returns (types.Void) {}
    // rpc IsAuthorizedTeacher(Void) returns (AuthorizationResponse) {}

    // groups //

    rpc GetGroup(types.GetGroupRequest) returns (types.Group) {}
    rpc GetGroupByUserAndCourse(types.GroupRequest) returns (types.Group) {}
    rpc GetGroupsByCourse(types.CourseRequest) returns (types.Groups) {}
    rpc CreateGroup(types.Group) returns (types.Group) {}
    rpc UpdateGroup(types.Group) returns (types.Void) {}
    rpc DeleteGroup(types.GroupRequest) returns (types.Void) {}

    // courses //

    rpc GetCourse(types.CourseRequest) returns (types.Course) {}
    rpc GetCourses(types.Void) returns (types.Courses) {}
    rpc GetCoursesByUser(types.EnrollmentStatusRequest) returns (types.Courses) {}
    rpc CreateCourse(types.Course) returns (types.Course) {}
    rpc UpdateCourse(types.Course) returns (types.Void) {}
    rpc UpdateCourseVisibility(types.Enrollment) returns (types.Void) {}

    // assignments //

    rpc GetAssignments(types.CourseRequest) returns (types.Assignments) {}
    rpc UpdateAssignments(types.CourseRequest) returns (types.Void) {}

    // enrollments //

    rpc GetEnrollmentsByUser(types.EnrollmentStatusRequest) returns (types.Enrollments) {}
    rpc GetEnrollmentsByCourse(types.EnrollmentRequest) returns (types.Enrollments) {}
    rpc CreateEnrollment(types.Enrollment) returns (types.Void) {}
    rpc UpdateEnrollments(types.Enrollments) returns (types.Void) {}

    // submissions //

    // Get latest submissions for all course assignments for a user or a group.
    rpc GetSubmissions(types.SubmissionRequest) returns (types.Submissions) {}
    // Get lab submissions for every course user or every course group
    rpc GetSubmissionsByCourse(types.SubmissionsForCourseRequest) returns (types.CourseSubmissions) {}
    rpc UpdateSubmission(types.UpdateSubmissionRequest) returns (types.Void) {}
    rpc UpdateSubmissions(types.UpdateSubmissionsRequest) returns (types.Void) {}
    rpc RebuildSubmissions(types.RebuildRequest) returns (types.Void) {}

    // manual grading //

    rpc CreateBenchmark(types.BenchmarkRequest) returns (types.GradingBenchmark) {}
    rpc UpdateBenchmark(types.BenchmarkRequest) returns (types.Void) {}
    rpc DeleteBenchmark(types.BenchmarkRequest) returns (types.Void) {}

    rpc CreateCriterion(types.CriteriaRequest) returns (types.GradingCriterion) {}
    rpc UpdateCriterion(types.CriteriaRequest) returns (types.Void) {}
    rpc DeleteCriterion(types.CriteriaRequest) returns (types.Void) {}

    rpc CreateReview(types.ReviewRequest) returns (types.Review) {}
    rpc UpdateReview(types.ReviewRequest) returns (types.Review) {}
    rpc GetReviewers(types.SubmissionReviewersRequest) returns (types.Reviewers) {}

    // misc //

    rpc GetProviders(types.Void) returns (types.Providers) {}
    rpc GetOrganization(types.OrgRequest) returns (types.Organization) {}
    rpc GetRepositories(types.URLRequest) returns (types.Repositories) {}
    rpc IsEmptyRepo(types.RepositoryRequest) returns (types.Void) {}
}
